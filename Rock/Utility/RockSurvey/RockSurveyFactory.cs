// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using System.Collections.Generic;
using System.Linq;
using Rock.Data;
using Rock.Model;
using Rock.SystemKey;
using Rock.Web.Cache;

namespace Rock.Utility
{
    /// <summary>
    /// Builds a Rock Survey by collating metrics and usage information for the current Rock installation.
    /// The survey generated by this factory contains some fields that must be manually populated to complete the survey.
    /// </summary>
    public class RockSurveyFactory
    {
        private RockContext _DataContext;
        private RockSurveyData _Survey;

        /// <summary>
        /// Create a new instance.
        /// </summary>
        /// <param name="dataContext"></param>
        public RockSurveyFactory( RockContext dataContext )
        {
            _DataContext = dataContext;
        }

        /// <summary>
        /// Collates metrics for the current Rock installation and generates a new Rock Survey.
        /// </summary>
        public RockSurveyData CreateNewSurvey()
        {
            // Create a new Survey and populate the data.
            _Survey = new RockSurveyData();

            // Add metrics calculated for the current Rock instance.
            AddSurveyDataForOrganization();
            AddSurveyDataForDatabase();

            AddSurveyDataForCoreFeatures();

            AddSurveyDataForAttendanceAndCheckinModule();
            AddSurveyDataForCmsModule();
            AddSurveyDataForCommunicationsModule();
            AddSurveyDataForConnectionsModule();
            AddSurveyDataForCrmModule();
            AddSurveyDataForEventsModule();
            AddSurveyDataForFinanceModule();
            AddSurveyDataForInteractionsFeature();
            AddSurveyDataForPrayerRequestsModule();
            AddSurveyDataForReportingModule();
            AddSurveyDataForSecurityFeatures();
            AddSurveyDataForWorkflowFeatures();
            AddSurveyDataForUtilityFeatures();

            // Set the timestamp.
            _Survey.CreatedDateTime = RockDateTime.Now;

            return _Survey;
        }

        /// <summary>
        /// Add survey data about the organization.
        /// </summary>
        private void AddSurveyDataForOrganization()
        {
            _Survey.RockInstanceId = Rock.Web.SystemSettings.GetRockInstanceId();

            _Survey.RockVersion = VersionInfo.VersionInfo.GetRockSemanticVersionNumber();

            var globalAttributes = GlobalAttributesCache.Get();

            _Survey.OrganizationName = globalAttributes.GetValue( "OrganizationName" );

            // Fetch the organization address
            var organizationAddressLocationGuid = globalAttributes.GetValue( "OrganizationAddress" ).AsGuid();

            if ( !organizationAddressLocationGuid.Equals( Guid.Empty ) )
            {
                var location = new LocationService( _DataContext ).Get( organizationAddressLocationGuid );

                if ( location != null )
                {
                    _Survey.OrganizationAddress = location.GetFullStreetAddress();
                }
            }

            // Campus count.
            _Survey.NumberOfCampuses = GetBaseQuery<Rock.Model.Campus>().Count();
        }

        /// <summary>
        /// Add data from the CRM Module to the survey result.
        /// </summary>
        private void AddSurveyDataForCrmModule()
        {
            // People
            _Survey.NumberOfPersons = GetBaseQuery<Rock.Model.Person>().WhereIsPersonRecordType().Count();
            _Survey.NumberOfActivePersons = GetBaseQuery<Rock.Model.Person>().WhereIsPersonRecordType().WhereIsActive().Count();
            _Survey.NumberOfBusinesses = GetBaseQuery<Rock.Model.Person>().WhereIsBusinessRecordType().Count();

            _Survey.NumberOfFamilies = GetBaseQuery<Rock.Model.Group>().WhereIsFamily().Count();
            _Survey.NumberOfConnectionStatuses = DefinedTypeCache.GetOrThrow( "Person Connection Status", SystemGuid.DefinedType.PERSON_CONNECTION_STATUS.AsGuid() ).DefinedValues.Count();

            _Survey.NumberOfPersonPhotos = GetBaseQuery<Rock.Model.Person>().WhereHasPhoto().Count();

            _Survey.NumberOfPersonDuplicates = GetBaseQuery<Rock.Model.PersonDuplicate>().Count();

            _Survey.NumberOfBackgroundChecks = GetBaseQuery<Rock.Model.BackgroundCheck>().Count();
            _Survey.NumberOfAssessments = GetBaseQuery<Rock.Model.Assessment>().Count();
            _Survey.NumberOfFollowedPeople = GetBaseQuery<Rock.Model.Following>().WhereTargetTypeIsPerson().Select( x => x.EntityId ).Distinct().Count();

            // Groups
            _Survey.NumberOfGroups = GetBaseQuery<Rock.Model.Group>().Count();
            _Survey.NumberOfActiveGroups = GetBaseQuery<Rock.Model.Group>().WhereIsActive().Count();
            _Survey.NumberOfArchivedGroups = GetBaseQuery<Rock.Model.Group>().WhereIsArchived().Count();
            _Survey.NumberOfGroupTypes = GetBaseQuery<Rock.Model.GroupType>().Count();

            // Tags
            _Survey.NumberOfOrganisationTags = GetBaseQuery<Rock.Model.Tag>().WhereHasOrganisationScope().Count();
            _Survey.NumberOfPersonalTags = GetBaseQuery<Rock.Model.Tag>().WhereHasPersonScope().Count();

            // National Change of Address (NCOA) report.
            var sparkDataConfig = Ncoa.GetSettings();

            _Survey.LastNCOARunDate = sparkDataConfig.NcoaSettings.LastRunDate;

            // Person Attributes
            _Survey.NumberOfPersonAttributes = GetBaseQuery<Rock.Model.Attribute>().WhereIsAttachedToEntityType<Rock.Model.Person>().Count();
        }

        /// <summary>
        /// Add data from the CRM Module to the survey result.
        /// </summary>
        private void AddSurveyDataForAttendanceAndCheckinModule()
        {
            _Survey.NumberOfAttendanceRecords = GetBaseQuery<Rock.Model.Attendance>().Count();
            _Survey.NumberOfSchedules = GetBaseQuery<Rock.Model.Schedule>().Count();
        }


        /// <summary>
        /// Add data from the Communications Module to the survey result.
        /// </summary>
        private void AddSurveyDataForCommunicationsModule()
        {
            _Survey.NumberOfCommunications = GetBaseQuery<Rock.Model.Communication>().Count();
            _Survey.NumberOfCommunicationRecipients = GetBaseQuery<Rock.Model.CommunicationRecipient>().Count();
            _Survey.NumberOfCommunicationLists = GetBaseQuery<Rock.Model.Group>().WhereIsCommunicationList().Count();

            var smsSendersType = DefinedTypeCache.GetOrThrow( "SMS Senders", SystemGuid.DefinedType.COMMUNICATION_SMS_FROM.AsGuid() );

            _Survey.NumberOfSmsSenderNumbers = smsSendersType.DefinedValues.Count();
        }

        /// <summary>
        /// Add data from the Connections Module to the survey result.
        /// </summary>
        private void AddSurveyDataForConnectionsModule()
        {
            _Survey.NumberOfConnectionTypes = GetBaseQuery<Rock.Model.ConnectionType>().Count();
            _Survey.NumberOfConnectionOpportunities = GetBaseQuery<Rock.Model.ConnectionOpportunity>().Count();
            _Survey.NumberOfConnectionRequests = GetBaseQuery<Rock.Model.ConnectionRequest>().Count();
            _Survey.NumberOfActiveConnectionRequests = GetBaseQuery<Rock.Model.ConnectionRequest>().WhereIsActive().Count();
        }

        /// <summary>
        /// Add data from core features to the survey result.
        /// </summary>
        private void AddSurveyDataForCoreFeatures()
        {
            _Survey.NumberOfHistoryRecords = GetBaseQuery<Rock.Model.History>().Count();
            _Survey.NumberOfBinaryFileTypes = GetBaseQuery<Rock.Model.BinaryFileType>().Count();
            _Survey.NumberOfNoteTypes = GetBaseQuery<Rock.Model.NoteType>().Count();
            _Survey.NumberOfAttributeMatrixTemplates = GetBaseQuery<Rock.Model.AttributeMatrixTemplate>().Count();
        }

        /// <summary>
        /// Add data from the CMS Module to the survey result.
        /// </summary>
        private void AddSurveyDataForCmsModule()
        {
            _Survey.NumberOfSites = GetBaseQuery<Rock.Model.Site>().Count();
            _Survey.NumberOfPages = GetBaseQuery<Rock.Model.Page>().Count();
            _Survey.NumberOfContentChannels = GetBaseQuery<Rock.Model.ContentChannel>().Count();
            _Survey.NumberOfContentChannelItems = GetBaseQuery<Rock.Model.ContentChannelItem>().Count();
            _Survey.NumberOfShortcodes = GetBaseQuery<Rock.Model.LavaShortcode>().Count();
        }

        /// <summary>
        /// Add data from the Workflows Feature to the survey result.
        /// </summary>
        private void AddSurveyDataForWorkflowFeatures()
        {
            _Survey.NumberOfWorkflowTypes = GetBaseQuery<Rock.Model.WorkflowType>().Count();
            _Survey.NumberOfWorkflowInstances = GetBaseQuery<Rock.Model.Workflow>().Count();
            _Survey.NumberOfActiveWorkflowInstances = GetBaseQuery<Rock.Model.Workflow>().WhereIsActive().Count();
            _Survey.NumberOfWorkflowTriggers = GetBaseQuery<Rock.Model.WorkflowTrigger>().Count();
        }

        /// <summary>
        /// Add data from the Events module to the survey result.
        /// </summary>
        private void AddSurveyDataForEventsModule()
        {
            _Survey.NumberOfEventRegistrationTemplates = GetBaseQuery<Rock.Model.RegistrationTemplate>().Count();
            _Survey.NumberOfRegistrationInstances = GetBaseQuery<Rock.Model.RegistrationInstance>().Count();
            _Survey.NumberOfEventRegistrations = GetBaseQuery<Rock.Model.Registration>().Count();
            _Survey.NumberOfCalendars = GetBaseQuery<Rock.Model.EventCalendar>().Count();
            _Survey.NumberOfEvents = GetBaseQuery<Rock.Model.EventItem>().Count();
        }

        /// <summary>
        /// Add data from the Finance module to the survey result.
        /// </summary>
        private void AddSurveyDataForFinanceModule()
        {
            _Survey.NumberOfActiveFinancialGateways = GetBaseQuery<Rock.Model.FinancialGateway>().WhereIsActive().Count();
            _Survey.NumberOfFinancialBatches = GetBaseQuery<Rock.Model.FinancialBatch>().Count();
            _Survey.NumberOfFinancialTransactions = GetBaseQuery<Rock.Model.FinancialTransaction>().Count();
            _Survey.NumberOfFinancialPledges = GetBaseQuery<Rock.Model.FinancialPledge>().Count();
        }

        /// <summary>
        /// Add data from the Interactions feature to the survey result.
        /// </summary>
        private void AddSurveyDataForInteractionsFeature()
        {
            _Survey.NumberOfInteractions = GetBaseQuery<Rock.Model.Interaction>().Count();
            _Survey.NumberOfInteractionChannels = GetBaseQuery<Rock.Model.InteractionChannel>().Count();
            _Survey.NumberOfInteractionComponents = GetBaseQuery<Rock.Model.InteractionComponent>().Count();
        }

        /// <summary>
        /// Add data from the Prayer Requests module to the survey result.
        /// </summary>
        private void AddSurveyDataForPrayerRequestsModule()
        {
            _Survey.NumberOfPrayerRequests = GetBaseQuery<Rock.Model.PrayerRequest>().Count();
        }

        /// <summary>
        /// Add data from the Reporting module to the survey result.
        /// </summary>
        private void AddSurveyDataForReportingModule()
        {
            _Survey.NumberOfDataViews = GetBaseQuery<Rock.Model.DataView>().Count();
            _Survey.NumberOfReports = GetBaseQuery<Rock.Model.Report>().Count();
            _Survey.NumberOfMetrics = GetBaseQuery<Rock.Model.Metric>().Count();
            _Survey.NumberOfMetricValues = GetBaseQuery<Rock.Model.MetricValue>().Count();
        }

        /// <summary>
        /// Add data from Security features to the survey result.
        /// </summary>
        private void AddSurveyDataForSecurityFeatures()
        {
            _Survey.NumberOfUserLogins = GetBaseQuery<Rock.Model.UserLogin>().Count();
            _Survey.NumberOfSecurityGroups = GetBaseQuery<Rock.Model.Group>().WhereIsSecurityRole().Count();
        }

        /// <summary>
        /// Add data from core features to the survey result.
        /// </summary>
        private void AddSurveyDataForUtilityFeatures()
        {
            var activityNames = new List<string>();

            // Reactivate People
            var settingsReactivate = Rock.Web.SystemSettings.GetValue( SystemSetting.DATA_AUTOMATION_REACTIVATE_PEOPLE ).FromJsonOrNull<Utility.Settings.DataAutomation.ReactivatePeople>();

            if ( settingsReactivate != null
                 && settingsReactivate.IsEnabled )
            {
                activityNames.Add( "Reactivate People" );
            }

            // Inactivate People
            var settingsInactivate = Rock.Web.SystemSettings.GetValue( SystemSetting.DATA_AUTOMATION_INACTIVATE_PEOPLE ).FromJsonOrNull<Utility.Settings.DataAutomation.InactivatePeople>();

            if ( settingsInactivate != null
                 && settingsInactivate.IsEnabled )
            {
                activityNames.Add( "Inactivate People" );
            }

            // Update Campus
            var settingsUpdateCampus = Rock.Web.SystemSettings.GetValue( SystemSetting.DATA_AUTOMATION_CAMPUS_UPDATE ).FromJsonOrNull<Utility.Settings.DataAutomation.UpdateFamilyCampus>();

            if ( settingsUpdateCampus != null
                 && settingsUpdateCampus.IsEnabled )
            {
                activityNames.Add( "Update Campus" );
            }

            // Move Adult Children to New Family
            var settingsMoveAdultChildren = Rock.Web.SystemSettings.GetValue( SystemSetting.DATA_AUTOMATION_ADULT_CHILDREN ).FromJsonOrNull<Utility.Settings.DataAutomation.MoveAdultChildren>();

            if ( settingsMoveAdultChildren != null
                 && settingsMoveAdultChildren.IsEnabled )
            {
                activityNames.Add( "Move Adult Children" );
            }

            // Update Connection Status
            var settingsUpdateConnectionStatus = Rock.Web.SystemSettings.GetValue( SystemSetting.DATA_AUTOMATION_UPDATE_PERSON_CONNECTION_STATUS ).FromJsonOrNull<Utility.Settings.DataAutomation.UpdatePersonConnectionStatus>();

            if ( settingsUpdateConnectionStatus != null
                 && settingsUpdateConnectionStatus.IsEnabled )
            {
                activityNames.Add( "Update Person Connection Status" );
            }

            // Update Family Status
            var settingsUpdateFamilyStatus = Rock.Web.SystemSettings.GetValue( SystemSetting.DATA_AUTOMATION_UPDATE_FAMILY_STATUS ).FromJsonOrNull<Utility.Settings.DataAutomation.UpdateFamilyStatus>();

            if ( settingsUpdateFamilyStatus != null
                 && settingsUpdateFamilyStatus.IsEnabled )
            {
                activityNames.Add( "Update Family Status" );
            }

            _Survey.EnabledDataAutomationActivities = activityNames;
        }

        #region Database Metrics

        /// <summary>
        /// Add database metrics to the survey result.
        /// </summary>
        private void AddSurveyDataForDatabase()
        {
            _Survey.DatabaseSizeMB = GetDatabaseSizeInMB();

            _Survey.DatabaseSizeUnallocatedMB = GetDatabaseSizeUnallocatedMB();

            var tableInfoEntries = GetDatabaseTableSizes();

            _Survey.DatabaseTableSizes = tableInfoEntries;

            // Get a count of tables that are prefixed with a single underscore.
            var plugInTableCount = tableInfoEntries.Count( x => x.TableName.StartsWith( "_" ) && !x.TableName.StartsWith( "__" ) );

            _Survey.NumberOfDatabasePluginTables = plugInTableCount;
        }

        /// <summary>
        /// Gets the size of the current database.
        /// </summary>
        /// <returns></returns>
        private decimal GetDatabaseSizeInMB()
        {
            var reader = DbService.GetDataReader( "sp_spaceused", System.Data.CommandType.StoredProcedure, null );

            decimal sizeInMB = 0;

            if ( reader != null && reader.Read() )
            {
                var size = reader["database_size"].ToStringSafe();

                sizeInMB = GetMegabyteValueFromString( size );
            }

            reader.Dispose();

            return sizeInMB;
        }

        /// <summary>
        /// Gets the unallocated space available for the current database.
        /// </summary>
        /// <returns></returns>
        private decimal GetDatabaseSizeUnallocatedMB()
        {
            var reader = DbService.GetDataReader( "sp_spaceused", System.Data.CommandType.StoredProcedure, null );

            decimal sizeInMB = 0;

            if ( reader != null && reader.Read() )
            {
                var size = reader["unallocated space"].ToStringSafe();

                sizeInMB = GetMegabyteValueFromString( size );
            }

            reader.Dispose();

            return sizeInMB;
        }

        /// <summary>
        /// Calculate a measure in megabytes (MB) from a supplied string containing a value in bytes, kilobytes
        /// </summary>
        /// <param name="size"></param>
        /// <returns></returns>
        private decimal GetMegabyteValueFromString( string size )
        {
            decimal sizeInMB = 0;

            size = size.ToStringSafe().ToUpper();

            if ( size.Contains( "MB" ) )
            {
                size = size.Replace( "MB", "" ).Trim();

                sizeInMB = decimal.Parse( size );
            }
            else if ( size.Contains( "KB" ) )
            {
                size = size.Replace( "KB", "" ).Trim();

                int sizeInKB = int.Parse( size );

                sizeInMB = decimal.Divide( sizeInKB, 1024 );
            }
            else
            {
                sizeInMB = decimal.Parse( size );
            }

            return sizeInMB;
        }

        /// <summary>
        /// Gets metrics for the tables in the current database.
        /// </summary>
        /// <returns></returns>
        private List<RockSurveyData.DatabaseTableInfo> GetDatabaseTableSizes()
        {
            // Query to retrieve the size of all tables in the database.
            // Refer to: https://stackoverflow.com/questions/7892334/get-size-of-all-tables-in-database            
            var sql = @"
SELECT 
    t.NAME AS TableName,
    s.Name AS SchemaName,
    p.rows AS [RowCount],
    SUM(a.total_pages) * 8 AS TotalSpaceKB, 
    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,
    SUM(a.used_pages) * 8 AS UsedSpaceKB, 
    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB, 
    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,
    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB
FROM 
    sys.tables t
INNER JOIN      
    sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN 
    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN 
    sys.allocation_units a ON p.partition_id = a.container_id
LEFT OUTER JOIN 
    sys.schemas s ON t.schema_id = s.schema_id
WHERE 
    t.NAME NOT LIKE 'dt%' 
    AND t.is_ms_shipped = 0
    AND i.OBJECT_ID > 255 
GROUP BY 
    t.Name, s.Name, p.Rows
ORDER BY 
    t.Name
";

            var tableInfoList = new List<RockSurveyData.DatabaseTableInfo>();

            var reader = DbService.GetDataReader( sql, System.Data.CommandType.Text, null );

            if ( reader != null )
            {
                while ( reader.Read() )
                {
                    var tableInfo = new RockSurveyData.DatabaseTableInfo()
                    {
                        TableName = ( string ) reader["TableName"],
                        RowCount = ( long ) reader["RowCount"],
                        SizeMB = ( decimal ) reader["TotalSpaceMB"]
                    };

                    tableInfoList.Add( tableInfo );
                }
            }

            return tableInfoList;
        }

        #endregion

        #region Internal methods

        /// <summary>
        /// Get a new query for the specified entity type.
        /// </summary>
        /// <returns></returns>
        private IQueryable<TEntity> GetBaseQuery<TEntity>()
            where TEntity : Rock.Data.Entity<TEntity>, new()
        {
            var service = new Service<TEntity>( _DataContext );

            return service.Queryable();
        }

        #endregion
    }
}